{
	"": {
		"prefix": "InfixToPostfix",
		"body": [
		  "int prec(char opr)",
		  "{",
		  "    if(opr == '+' || opr == '-') return 1;",
		  "    else if(opr == '*' || opr == '/') return 2;",
		  "    else if(opr == '^') return 3;",
		  "    else return -1;",
		  "}",
		  "",
		  "string infixToPostfix(const string &s)",
		  "{",
		  "    string postfix;",
		  "    stack<char> stk;",
		  "    ",
		  "    for(int i=0; s[i]; i++)",
		  "    {",
		  "        if(s[i]>= 'a' && s[i]<= 'z' || s[i]>= 'A' && s[i]<= 'Z' )",
		  "        {",
		  "            postfix.push_back(s[i]);",
		  "        }",
		  "        else if(s[i] == '(')",
		  "        {",
		  "            stk.push('(');",
		  "        }",
		  "        else if(s[i] == ')')",
		  "        {",
		  "            while(!stk.empty() && stk.top() != '(')",
		  "            {",
		  "                postfix.push_back(stk.top());",
		  "                stk.pop();",
		  "            }",
		  "            if(!stk.empty()) stk.pop(); ",
		  "            else",
		  "            {",
		  "                cerr<<\"Invalid infix sression: \"<<s<<endl;",
		  "                exit(1);",
		  "            }",
		  "        }",
		  "        else",
		  "        {",
		  "            while(!s.empty() && prec(s[i]) <= prec(stk.top()))",
		  "            {",
		  "                postfix.push_back(stk.top());",
		  "                stk.pop();",
		  "            }",
		  "            stk.push(s[i]);",
		  "        }",
		  "    }",
		  "",
		  "    while(!stk.empty())",
		  "    {",
		  "        postfix.push_back(stk.top());",
		  "        stk.pop();",
		  "    }",
		  "    ",
		  "    return postfix;",
		  "}"
		],
		"description": ""
	  }
}